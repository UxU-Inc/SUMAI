[{"D:\\sumai\\SUMAI main\\sumai_web\\src\\index.js":"1","D:\\sumai\\SUMAI main\\sumai_web\\src\\App.js":"2","D:\\sumai\\SUMAI main\\sumai_web\\src\\rootValue.js":"3","D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\index.js":"4","D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\clientInfo.js":"5","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\LoginMain.js":"6","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountPassword.js":"7","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountGender.js":"8","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PasswordReset.js":"9","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\EmailLogin.js":"10","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountBirthday.js":"11","D:\\sumai\\SUMAI main\\sumai_web\\src\\Main.js":"12","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountWithdrawal.js":"13","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountNameChange.js":"14","D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\authentication.js":"15","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\NotFound.js":"16","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\EmailCertification.js":"17","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Account.js":"18","D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\mainRecord.js":"19","D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\authentication.js":"20","D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\ActionTypes.js":"21","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PolicyFooter.js":"22","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Signup.js":"23","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Login.js":"24","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PrivacyContents.js":"25","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\TermsContents.js":"26","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\NoticesContents.js":"27","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountImage.js":"28","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\DialogContents.js":"29","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\RecordLastest.js":"30","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Body.js":"31","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\RecordRecommend.js":"32","D:\\sumai\\SUMAI main\\sumai_web\\src\\componentsMob\\Body.js":"33","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Header.js":"34","D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\mainRecord.js":"35","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Policy.js":"36","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PolicyHeader.js":"37"},{"size":1024,"mtime":1612610472214,"results":"38","hashOfConfig":"39"},{"size":5561,"mtime":1615427667266,"results":"40","hashOfConfig":"39"},{"size":179,"mtime":1599649891834,"results":"41","hashOfConfig":"39"},{"size":369,"mtime":1598439341337,"results":"42","hashOfConfig":"39"},{"size":2965,"mtime":1611036828409,"results":"43","hashOfConfig":"39"},{"size":5081,"mtime":1614321586903,"results":"44","hashOfConfig":"39"},{"size":11739,"mtime":1609334173589,"results":"45","hashOfConfig":"39"},{"size":11274,"mtime":1609334173588,"results":"46","hashOfConfig":"39"},{"size":8853,"mtime":1609931540206,"results":"47","hashOfConfig":"39"},{"size":10303,"mtime":1609931540205,"results":"48","hashOfConfig":"39"},{"size":13852,"mtime":1609334173587,"results":"49","hashOfConfig":"39"},{"size":7721,"mtime":1614151518749,"results":"50","hashOfConfig":"39"},{"size":13311,"mtime":1610440323341,"results":"51","hashOfConfig":"39"},{"size":7338,"mtime":1599649891829,"results":"52","hashOfConfig":"39"},{"size":4985,"mtime":1610439581230,"results":"53","hashOfConfig":"39"},{"size":3933,"mtime":1609753240910,"results":"54","hashOfConfig":"39"},{"size":3821,"mtime":1609334173590,"results":"55","hashOfConfig":"39"},{"size":12093,"mtime":1615432547244,"results":"56","hashOfConfig":"39"},{"size":2033,"mtime":1597844044663,"results":"57","hashOfConfig":"39"},{"size":3516,"mtime":1599220683119,"results":"58","hashOfConfig":"39"},{"size":1522,"mtime":1598439341329,"results":"59","hashOfConfig":"39"},{"size":1935,"mtime":1609334173593,"results":"60","hashOfConfig":"39"},{"size":36599,"mtime":1615199503043,"results":"61","hashOfConfig":"39"},{"size":21228,"mtime":1609931978580,"results":"62","hashOfConfig":"39"},{"size":13423,"mtime":1614320700141,"results":"63","hashOfConfig":"39"},{"size":25793,"mtime":1614321130488,"results":"64","hashOfConfig":"39"},{"size":10930,"mtime":1614321004771,"results":"65","hashOfConfig":"39"},{"size":6350,"mtime":1609334173589,"results":"66","hashOfConfig":"39"},{"size":2228,"mtime":1609724513056,"results":"67","hashOfConfig":"39"},{"size":18821,"mtime":1612610472213,"results":"68","hashOfConfig":"39"},{"size":8812,"mtime":1609931978580,"results":"69","hashOfConfig":"39"},{"size":18814,"mtime":1614151518750,"results":"70","hashOfConfig":"39"},{"size":7112,"mtime":1612610472214,"results":"71","hashOfConfig":"39"},{"size":24251,"mtime":1612610472212,"results":"72","hashOfConfig":"39"},{"size":2384,"mtime":1599048250386,"results":"73","hashOfConfig":"39"},{"size":1215,"mtime":1615427622569,"results":"74","hashOfConfig":"39"},{"size":3349,"mtime":1615427760776,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"gjx94n",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\sumai\\SUMAI main\\sumai_web\\src\\index.js",[],["153","154"],"D:\\sumai\\SUMAI main\\sumai_web\\src\\App.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\rootValue.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\index.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\clientInfo.js",["155"],"// 리듀서는 dispatch 함수로 부터 전달받은 action 객체의 type 값에 따라 state 를 변경하는 함수입니다.\r\nimport * as types from '../actions/ActionTypes';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n \r\nconst initialState = {\r\n    ipv4: '',\r\n    href: '',\r\n    loading: true,\r\n    act: '',\r\n    sendAct: false,\r\n};\r\n \r\nexport default function ClientInfo(state=initialState, action) {\r\n  switch(action.type) {\r\n    case types.CLIENTIFO_SET:\r\n      return {\r\n        ...state,\r\n        ipv4: action.ipv4,\r\n        href: action.href,\r\n        loading: action.loading,\r\n      }\r\n      case types.CLIENTIFO_SENDACT:\r\n        return {\r\n          ...state,\r\n          act: action.act,\r\n          sendAct: action.sendAct\r\n        }\r\n        case types.CLIENTIFO_RECVACT:\r\n          return {\r\n            ...state,\r\n            sendAct: action.sendAct\r\n          }\r\n    default:\r\n      return {\r\n          ...state\r\n      };\r\n  }\r\n};\r\n\r\nconst setInfo = (ipv4, href) => {\r\n  return {\r\n    type: \"CLIENTIFO_SET\",\r\n    ipv4: ipv4,\r\n    href: href,\r\n    loading: false\r\n  }\r\n}\r\n\r\nconst sendAct = (act) => {\r\n  return {\r\n    type: \"CLIENTIFO_SENDACT\",\r\n    act: act,\r\n    sendAct: true,\r\n  }\r\n}\r\n\r\n\r\nconst recvAct = () => {\r\n  return {\r\n    type: \"CLIENTIFO_RECVACT\",\r\n    sendAct: false,\r\n  }\r\n}\r\n\r\nfunction ClientInfoComponent() {\r\n  // const [statusInfo, statusInfoLoading] = useStatusInfo()\r\n  // const state = useSelector(state => state)\r\n  const clientInfo = useSelector(state => state.clientInfo)\r\n  // const loginInfo = useSelector(state => state.authentication.login)\r\n  const statusInfo = useSelector(state => state.authentication.status)\r\n  // const signupInfo = useSelector(state => state.authentication.signup)\r\n  const clientInfoLoading = useSelector(state => state.clientInfo.loading)\r\n  const location = useLocation()\r\n  const dispatch = React.useCallback(useDispatch(), [])\r\n  \r\n\r\n  const RecordLog = (act) => {\r\n    axios.post('/api/recordLog/recordLog', {\r\n      id: statusInfo?.id ?? '',\r\n      action: clientInfo.act\r\n    })\r\n  }\r\n\r\n  // clientinfo를 얻음\r\n  useEffect(() => {\r\n    const ClientInfo = () => {\r\n      axios.get('/api/recordLog/getIP').then((res) => {\r\n        const href=window.location.href\r\n        const ipv4=res.data\r\n        dispatch(setInfo(ipv4, href))\r\n      })\r\n    }\r\n    ClientInfo()\r\n  }, [dispatch])\r\n\r\n  // 호스트 경로가 바뀔 때 마다 act\r\n  useEffect(()=> {\r\n    dispatch(sendAct(`move ${location.pathname}`))\r\n  }, [location.pathname, dispatch])\r\n\r\n  // recv\r\n  useEffect(() => {\r\n    if(clientInfo.sendAct && !clientInfoLoading) {\r\n      RecordLog()\r\n      dispatch(recvAct())\r\n    }\r\n  })\r\n\r\n\r\n  return(<p style={{display: 'none'}}/>)\r\n}\r\n\r\nexport {\r\n  setInfo,\r\n  sendAct,\r\n  ClientInfoComponent,\r\n}","D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\LoginMain.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountPassword.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountGender.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PasswordReset.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\EmailLogin.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountBirthday.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\Main.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountWithdrawal.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountNameChange.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\authentication.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\NotFound.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\EmailCertification.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Account.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\mainRecord.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\reducers\\authentication.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\ActionTypes.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PolicyFooter.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Signup.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Login.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PrivacyContents.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\TermsContents.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\NoticesContents.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\AccountImage.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\DialogContents.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\RecordLastest.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Body.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\RecordRecommend.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\componentsMob\\Body.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Header.js",["156"],"/* eslint-disable react-hooks/rules-of-hooks */\r\nimport React, { Component } from 'react';\r\nimport { withStyles, } from '@material-ui/core/styles';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './Header.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport imgLogo from '../images/sumai_logo_blue.png';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport PropTypes from 'prop-types';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport AccountIcon from '@material-ui/icons/AccountCircle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CryptoJS from 'crypto-js';\r\nimport * as root from '../rootValue';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport FeaturedPlayListIcon from '@material-ui/icons/FeaturedPlayList';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\n\r\n// import html2canvas from 'html2canvas';\r\n// import emailjs from 'emailjs-com';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { sendAct } from '../reducers/clientInfo';\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(1),\r\n    color: '#0000008A',\r\n  },\r\n  AppBarStyle: {\r\n    background: '#ffffff',\r\n    borderBottom: '1px solid #e0e0e0',\r\n  },\r\n  imgLogo: {\r\n    width: 80,\r\n    height: 28.2,\r\n    alt: 'SUMAI',\r\n  },\r\n  imgLogoMob: {\r\n    width: 64,\r\n    height: 22.56,\r\n    alt: 'SUMAI',\r\n  },\r\n  newsButton: {\r\n    '&:hover': {\r\n      background: \"#e3f2fd\"\r\n    },\r\n    background: \"#fff\",\r\n    color: root.PrimaryColor,\r\n    border: '1px solid #d4d4d4',\r\n    marginRight: \"10px\",\r\n  },\r\n  loginButton: {\r\n    '&:hover': {\r\n      background: root.HoberColor\r\n    },\r\n    background: root.PrimaryColor,\r\n    color: \"#fff\",\r\n  },\r\n  summaryTypo: {\r\n    color: \"#0000008A\",\r\n  },\r\n  link: {\r\n    display: 'flex',\r\n    alignItems: \"center\",\r\n    textDecoration: 'none',\r\n    minWidth: \"142px\",\r\n  },\r\n  list: {\r\n    width: 280,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  listText: {\r\n    fontFamily: \"NotoSansKR-Regular\",\r\n    padding: theme.spacing(0.5),\r\n    paddingLeft: theme.spacing(5),\r\n    fontSize: 13,\r\n  },\r\n\r\n\r\n  FeedbackDialogRoot: {\r\n    justifyContent: 'center',\r\n    margin: '0 auto',\r\n  },\r\n  FeedbackDialogContent: {\r\n    display: 'flex',\r\n    padding: \"10px 15px\",\r\n\r\n  },\r\n})\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: 'white',\r\n  },\r\n});\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nfunction FeedbackDialog(props) {\r\n  const { open, setOpen, classes, matches } = props\r\n  // const [screen, setScreen] = React.useState(null)\r\n  const [message, setMessage] = React.useState('')\r\n\r\n  const [snackbarOpen, setSnackbarOpen] = React.useState(false)\r\n\r\n  const [sendEmailButton, setSendEmailButton] = React.useState(true)\r\n  const [sendEmailStatus, setSendEmailStatus] = React.useState(null)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // const screenShot = () => {\r\n  //   document.getElementById('feedback').hidden = true\r\n  //   html2canvas(document.body, {removeContainer: false, }).then(function(canvas) {\r\n  //     // return(canvas)\r\n  //   // setScreen(document.getElementById('capture').appendChild(canvas))\r\n  //   document.getElementById('feedback').hidden = false\r\n  //   setScreen(canvas)\r\n  //   })\r\n  // }\r\n\r\n  const showCanvas = () => {\r\n    // console.log('미구현')\r\n  }\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbarOpen(false)\r\n  }\r\n\r\n  const handleMessage = (event) => {\r\n    setMessage(event.target.value)\r\n  }\r\n  function sendEmail(e) {\r\n    setSendEmailButton(false)\r\n    e.preventDefault();\r\n\r\n    axios.post('/api/Email/sendEmail', { message: message }).then((res) => { // email을 추가하려면 {massage: message, email: 변수}\r\n      setSendEmailStatus(res.status)\r\n      dispatch(sendAct('send feedback is success'))\r\n      setSnackbarOpen(true)\r\n    }, (res) => {\r\n      setSendEmailButton(true)\r\n      setSendEmailStatus(res.status)\r\n      dispatch(sendAct('send feedback is fail'))\r\n      setSnackbarOpen(true)\r\n    });\r\n    handleClose()\r\n  }\r\n\r\n  // useEffect(() => {\r\n  //   if(screen!==null){\r\n  //     let t=document.getElementById('screenshotPreview')\r\n  //     t.src=screen.toDataURL()\r\n  //     t.height=300\r\n  //     // let context = screen.getContext(\"2d\")\r\n  //     // context.fillStyle = \"#FF0000\";\r\n  //     // context.fillRect(0,0,150,75)\r\n  //   }\r\n  // },[screen])\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setMessage('');\r\n    setSendEmailButton(true);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Dialog id='feedback' onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} fullScreen={!matches}\r\n        style={matches ? { width: '460px', } : {}} className={classes.FeedbackDialogRoot}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} style={{ backgroundColor: root.PrimaryColor, color: 'white', padding: \"10px 15px\" }}>\r\n          의견 보내기\r\n        </DialogTitle>\r\n        <Box className={classes.FeedbackDialogContent} style={matches ? { minHeight: '200px', maxHeight: '250px' } : { height: '100%' }}>\r\n          <TextareaAutosize className={classes.textInput} maxLength=\"5000\" autoFocus={true} onChange={handleMessage}\r\n            placeholder=\"의견을 보내고 싶으신가요? 보내 주신 의견은 소중하게 활용되지만, 민감한 정보는 공유하지 말아 주세요. 궁금하신 점이 있나요? 지원팀에 문의해 보세요.\"\r\n            style={{\r\n              boxSizing: \"border-box\",\r\n              flexGrow: 1,\r\n              width: '100%',\r\n              height: 'auto',\r\n              resize: 'none',\r\n              border: 'none',\r\n              outline: 'none',\r\n              font: \"400 16px NotoSansKR-Regular\",\r\n            }} />\r\n        </Box>\r\n        <Box style={{ display: 'block', background: 'WhiteSmoke', padding: '0' }}>\r\n          {/* <Box id='screenshotButton' style={{display: 'flex', width: '400'}}>\r\n            <Button onClick={(event) => {\r\n              screenShot()\r\n              document.getElementById('screenshotButton').remove()\r\n            }} style={{marginLeft:'auto', marginRight:'auto', width:'100%', padding:'8px 0'}}>\r\n              스크린샷 첨부하기\r\n            </Button>\r\n          </Box> */}\r\n          <Box style={{ display: 'flex' }}>\r\n            <img id=\"screenshotPreview\" src='' alt='' style={{ marginLeft: 'auto', marginRight: 'auto', }} onClick={showCanvas} />\r\n          </Box>\r\n        </Box>\r\n        <small\r\n          style={{\r\n            borderTop: '1px solid rgb(224, 224, 224)',\r\n            color: 'rgb(168, 168, 168)',\r\n            backgroundColor: 'rgb(250, 250, 250)',\r\n            font: \"12px NotoSansKR-Regular\",\r\n            padding: \"15px 15px\"\r\n          }}>\r\n          일부 계정 및 시스템 정보가 SUMAI에 전송될 수 있습니다.\r\n          제공해 주신 정보는 개인정보처리방침 및 서비스 약관에 따라 기술 문제를 해결하고 서비스를 개선하는 데 사용됩니다.\r\n        </small>\r\n        <DialogActions\r\n          style={{ borderTop: '1px solid rgb(224, 224, 224)', backgroundColor: 'rgb(250, 250, 250)', padding: '5px 15px' }}>\r\n          <Button id='sendEmailButton' autoFocus color=\"primary\" style={{ font: \"16px NotoSansKR-Regular\", }} onClick={sendEmail} disabled={!sendEmailButton}>\r\n            보내기\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n      <Snackbar autoHideDuration={3000} open={snackbarOpen} onClose={handleCloseSnackbar}>\r\n        {\r\n          (sendEmailStatus === 200 &&\r\n            <Alert severity={\"success\"}>\r\n              소중한 의견 감사합니다.\r\n            </Alert>\r\n          ) || (\r\n            <Alert severity={\"error\"}>\r\n              죄송합니다. 의견 보내기 실패했습니다.\r\n            </Alert>\r\n          )\r\n        }\r\n      </Snackbar>\r\n    </Box>\r\n  )\r\n}\r\n\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  paper: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction MenuListComposition(props) {\r\n  const classes = useStyles2();\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  // const { xsm } = props\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const onClickExternLink = (url) => {\r\n    window.location.assign(url)\r\n  };\r\n\r\n  function handleListKeyDown(event) {\r\n    if (event.key === 'Tab') {\r\n      event.preventDefault();\r\n      setOpen(false);\r\n    }\r\n  }\r\n\r\n  // return focus to the button when we transitioned from !open -> open\r\n  const prevOpen = React.useRef(open);\r\n  React.useEffect(() => {\r\n    if (prevOpen.current === true && open === false) {\r\n      anchorRef.current.focus();\r\n    }\r\n\r\n    prevOpen.current = open;\r\n  }, [open]);\r\n\r\n\r\n  function FormRow() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* xs={xsm?4:6} */}\r\n        <Grid item xs={12} >\r\n          <MenuItem onClick={onClickExternLink.bind(this, \"https://news.sumai.co.kr\")} style={{ width: \"100%\" }}>\r\n            <div style={{ margin: \"0 auto\" }}>\r\n              <Box>\r\n                <FeaturedPlayListIcon fontSize=\"large\" style={{ color: root.PrimaryColor }} />\r\n              </Box>\r\n              <Box>\r\n                <Typography style={{ fontFamily: \"NotoSansKR-Regular\" }}>\r\n                  뉴스\r\n                </Typography>\r\n              </Box>\r\n            </div>\r\n          </MenuItem>\r\n        </Grid>\r\n        {/* <Grid item xs={xsm?4:6}>\r\n          <MenuItem onClick={handleClose} style={{width: \"100%\"}}>\r\n            <div style={{margin: \"0 auto\"}}>\r\n              <Box> \r\n                <FeaturedPlayListIcon fontSize=\"large\" style={{color: root.PrimaryColor}}/> \r\n              </Box>\r\n              <Box> \r\n                <Typography style={{fontFamily: \"NotoSansKR-Regular\"}}> \r\n                  뉴스\r\n                </Typography> \r\n              </Box>\r\n            </div>\r\n          </MenuItem>\r\n        </Grid>\r\n\r\n      {xsm\r\n      ?\r\n        <Grid item xs={xsm?4:6}>\r\n        <MenuItem onClick={handleClose} style={{width: \"100%\"}}>\r\n          <div style={{margin: \"0 auto\"}}>\r\n            <Box> \r\n              <FeaturedPlayListIcon fontSize=\"large\" style={{color: root.PrimaryColor}}/> \r\n            </Box>\r\n            <Box> \r\n              <Typography style={{fontFamily: \"NotoSansKR-Regular\"}}> \r\n                뉴스\r\n              </Typography> \r\n            </Box>\r\n          </div>\r\n        </MenuItem>\r\n      </Grid>\r\n      :\r\n        null\r\n      } */}\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div>\r\n        <IconButton style={{ marginRight: \"5px\" }}\r\n          ref={anchorRef}\r\n          aria-controls={open ? 'menu-list-grow' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={handleToggle}>\r\n          <AppsIcon />\r\n        </IconButton>\r\n        {/* style={{marginRight: xsm?\"70px\":undefined, zIndex:100}} */}\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal style={{ zIndex: 100 }}>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\r\n            >\r\n              <Paper elevation={3} >\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\r\n\r\n                    {/* <Grid container spacing={1} style={{width: xsm?\"300px\":\"200px\"}}>  */}\r\n                    <Grid container spacing={1} >\r\n                      <Grid container item xs={12}>\r\n                        <FormRow />\r\n                      </Grid>\r\n                      {/* <Grid container item xs={12}>\r\n                        <FormRow />\r\n                      </Grid>\r\n                      <Grid container item xs={12}>\r\n                        <FormRow />\r\n                      </Grid> */}\r\n                    </Grid>\r\n\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nclass Header extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      left: false,\r\n      dialogOpen: false,\r\n    }\r\n\r\n  }\r\n\r\n  dialogOpen = (bool) => {\r\n    this.setState({\r\n      dialogOpen: bool,\r\n    })\r\n  }\r\n\r\n\r\n  AccountManagementMenu = (props) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const [image, setImage] = React.useState('');\r\n    const [avatarName, setAvatarName] = React.useState('');\r\n    const [avatarColor, setAvatarColor] = React.useState('');\r\n\r\n    const anchorRef = React.useRef(null);\r\n\r\n    const handleToggle = () => {\r\n      setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n      if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n        return;\r\n      }\r\n\r\n      setOpen(false);\r\n    };\r\n\r\n    function handleListKeyDown(event) {\r\n      if (event.key === 'Tab') {\r\n        event.preventDefault();\r\n        setOpen(false);\r\n      }\r\n    }\r\n\r\n    function re_name(name) {\r\n      let re_name = '';\r\n\r\n      if (/[a-zA-Z0-9]/.test(name.charAt(0))) {\r\n        re_name = name.charAt(0);\r\n      } else if (name.length >= 3) {\r\n        if (/[a-zA-Z0-9]/.test(name.substring(name.length - 2, name.length))) {\r\n          re_name = name.charAt(0);\r\n        } else {\r\n          re_name = name.substring(name.length - 2, name.length);\r\n        }\r\n      } else {\r\n        re_name = name;\r\n      }\r\n\r\n      return re_name;\r\n    }\r\n\r\n    // return focus to the button when we transitioned from !open -> open\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const prevOpen = React.useRef(open);\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n        anchorRef.current.focus();\r\n      }\r\n\r\n      prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n      if (props.currentId !== '') {\r\n        profile_image(props.currentId).then((imageURL) => {\r\n          setImage(imageURL);\r\n          setAvatarName(re_name(props.currentUser))\r\n          setAvatarColor('#' + CryptoJS.MD5(props.currentId).toString().substring(1, 7))\r\n        })\r\n      }\r\n    }, [props.currentId, props.currentUser]);\r\n\r\n\r\n    function profile_image(id) {\r\n      return new Promise((res, rej) => axios.post('/api/account/accountLoad/' + id, { } ).then((data) => {\r\n        res(data.data.image);\r\n      }).catch(() => {\r\n        res('');\r\n      }))\r\n    }\r\n\r\n    return (\r\n      <Box>\r\n        <Box\r\n          ref={anchorRef}\r\n          aria-controls={open ? 'menu-list-grow' : undefined}\r\n          aria-haspopup=\"true\"\r\n          onClick={handleToggle}\r\n          style={{ color: \"#0000008A\", cursor: 'pointer' }}\r\n        >\r\n          {\r\n            image === '' ?\r\n              <Avatar style={{ backgroundColor: avatarColor, width: \"2.2em\", height: \"2.2em\", fontWeight: 'bold', textTransform: \"none\" }}>\r\n                {avatarName}\r\n              </Avatar> :\r\n              <Avatar src={image} style={{ width: \"2.2em\", height: \"2.2em\" }} />\r\n          }\r\n\r\n        </Box>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\r\n                    <MenuItem onClick={this.onClickLink(\"accounts\")}>계정 관리</MenuItem>\r\n                    <MenuItem onClick={props.onLogout}>로그아웃</MenuItem>\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    this.setState({ anchor: open });\r\n  }\r\n  onClickLink = (url) => (e) => {\r\n    this.props.onClickLink(url)\r\n  }\r\n  onClickExternLink = (url) => (e) => {\r\n    window.location.assign(url)\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const { classes } = this.props;\r\n    const loginButton = (\r\n      <Button className={classes.loginButton} onClick={this.onClickLink(\"/login\")} style={this.props.matches ? { padding: \"7.5px 15px\" } : { padding: \"5px\", minWidth: '80px' }}>\r\n        <AccountIcon style={{ marginRight: \"5px\", }} />\r\n        로그인\r\n      </Button>\r\n    )\r\n    const loginLayout = (\r\n      <Box display=\"flex\" flexDirection=\"row\" style={{ marginLeft: \"auto\", color: 'rgba(0, 0, 0, 0.87)' }}>\r\n        <Box p={1}>\r\n          {this.AccountManagementMenu.bind(this, this.props)}\r\n        </Box>\r\n      </Box>\r\n    )\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\" className={classes.AppBarStyle} style={this.props.matches ? { padding: \"10px 0px\" } : { minWidth: '56px' }}>\r\n          <Toolbar variant=\"dense\" style={this.props.matches ? {} : { padding: \"0px 10px 0px 20px\", flex: 1 }}>\r\n            {['left'].map((anchor) => (\r\n              <React.Fragment key={anchor}>\r\n                <IconButton onClick={this.toggleDrawer(anchor, true)} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                  <MenuIcon />\r\n                </IconButton>\r\n\r\n                <Drawer anchor={anchor} open={this.state.anchor} onClose={this.toggleDrawer(anchor, false)}>\r\n\r\n                  {/* {this.props.xsm\r\n                    ?\r\n                    null\r\n                    :\r\n                    <Box display=\"flex\" justifyContent=\"flex-end\" style={{ background: \"#f5f5f5\" }}>\r\n                      <MenuListComposition xsm={this.props.xsm} />\r\n                    </Box>\r\n                  } */}\r\n\r\n                  <div\r\n                    className={clsx(classes.list, {\r\n                      [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n                    })}\r\n                    role=\"presentation\"\r\n                    onClick={this.toggleDrawer(anchor, false)}\r\n                    onKeyDown={this.toggleDrawer(anchor, false)}\r\n                    style={this.props.matches ? {} : { width: '250px' }}\r\n                  >\r\n\r\n                    <ListItem >\r\n                      <a href=\"/\" style={{ marginTop: 5, marginLeft: 5 }} className={classes.link} >\r\n                        <img src={imgLogo} alt=\"SUMAI\" className={classes.imgLogo} />\r\n\r\n                        <Typography className={classes.summaryTypo} style={{ fontSize: \"28px\", marginLeft: \"10px\" }}>\r\n                          요약\r\n                      </Typography>\r\n                      </a>\r\n                    </ListItem>\r\n                    <List>\r\n                      <ListItem button onClick={this.onClickLink(\"terms\")} >\r\n                        <ListItemText disableTypography primary=\"이용약관\" className={classes.listText} />\r\n                      </ListItem>\r\n                      <ListItem button onClick={this.onClickLink(\"privacy\")} >\r\n                        <ListItemText disableTypography primary=\"개인정보처리방침\" className={classes.listText} />\r\n                      </ListItem>\r\n                      <ListItem button onClick={this.onClickLink(\"notices\")} >\r\n                        <ListItemText disableTypography primary=\"공지사항\" className={classes.listText} />\r\n                      </ListItem>\r\n\r\n                      <Divider />\r\n\r\n                      <ListItem button onClick={() => this.dialogOpen(true)}>\r\n                        <ListItemText disableTypography primary=\"의견 보내기\" className={classes.listText} />\r\n                      </ListItem>\r\n                    </List>\r\n                  </div>\r\n                </Drawer>\r\n              </React.Fragment>\r\n            ))}\r\n\r\n            <a href=\"/\" className={classes.link} >\r\n              <img src={imgLogo} alt=\"SUMAI\" className={this.props.matches ? classes.imgLogo : classes.imgLogoMob} />\r\n\r\n              <Typography className={classes.summaryTypo} style={this.props.matches ? { fontSize: \"28px\", marginLeft: \"10px\" } : { fontSize: \"24px\", marginLeft: \"8px\" }}>\r\n                요약\r\n              </Typography>\r\n            </a>\r\n\r\n            <div style={{ flexGrow: 1 }} />\r\n\r\n            {/* {this.props.matches\r\n              ?  // PC\r\n              <Button className={classes.newsButton} onClick={this.onClickExternLink(\"https://news.sumai.co.kr\")} style={this.props.matches ? { padding: \"7.5px 15px\" } : { padding: \"5px\", minWidth: '80px' }}>\r\n                <FeaturedPlayListIcon style={{ color: root.PrimaryColor, marginRight: \"5px\" }} />\r\n                뉴스\r\n              </Button>\r\n              :  // Mobile\r\n              this.props.xsm\r\n                ?  // Mobile(360~720)\r\n                <MenuListComposition xsm={this.props.xsm} />\r\n                :  // Mobile(0~360)\r\n                null\r\n            } */}\r\n\r\n            {this.props.isLoggedIn ? loginLayout : loginButton}\r\n\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n        <FeedbackDialog open={this.state.dialogOpen} setOpen={this.dialogOpen} classes={classes} matches={this.props.matches} />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nHeader.propTypes = {\r\n  isLoggedIn: PropTypes.bool,\r\n  currentUser: PropTypes.string,\r\n  currentId: PropTypes.string,\r\n  onLogout: PropTypes.func\r\n};\r\n\r\nHeader.defaultProps = {\r\n  isLoggedIn: false,\r\n  currentUser: '',\r\n  currentId: '',\r\n  onLogout: () => { console.error(\"logout function not defined\"); }\r\n};\r\n\r\nexport default withStyles(useStyles)(Header);\r\n","D:\\sumai\\SUMAI main\\sumai_web\\src\\actions\\mainRecord.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\Policy.js",[],"D:\\sumai\\SUMAI main\\sumai_web\\src\\components\\PolicyHeader.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":80,"column":20,"nodeType":"163","endLine":80,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":306,"column":10,"nodeType":"166","messageId":"167","endLine":306,"endColumn":29},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","MemberExpression","no-unused-vars","'MenuListComposition' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]